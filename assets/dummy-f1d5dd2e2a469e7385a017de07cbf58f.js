"use strict"
define("dummy/app",["exports","dummy/resolver","ember-load-initializers","dummy/config/environment"],function(e,n,t,a){var o
Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,window.AudioContext||window.webkitAudioContext||(document.write("Oh poo. Looks like this browser doesn't support the Web Audio API.<br><br>"),document.write('<a href="http://caniuse.com/#feat=audio-api">See supported browsers.</a><br><br>'),document.write('<a href="http://lmgtfy.com/?q=web+audio+api+audiocontext+polyfill">There are polyfills, but I have not tested them.</a>')),o=Ember.Application.extend({modulePrefix:a.default.modulePrefix,podModulePrefix:a.default.podModulePrefix,Resolver:n.default}),(0,t.default)(o,a.default.modulePrefix)
var i=o
e.default=i}),define("dummy/classes/beat-track",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"BeatTrack",{enumerable:!0,get:function(){return n.BeatTrack}})}),define("dummy/classes/beat",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Beat",{enumerable:!0,get:function(){return n.Beat}})}),define("dummy/classes/connection",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Connection",{enumerable:!0,get:function(){return n.Connection}})}),define("dummy/classes/font",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Font",{enumerable:!0,get:function(){return n.Font}})}),define("dummy/classes/layered-sound",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayeredSound",{enumerable:!0,get:function(){return n.LayeredSound}})}),define("dummy/classes/note",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Note",{enumerable:!0,get:function(){return n.Note}})}),define("dummy/classes/oscillator",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Oscillator",{enumerable:!0,get:function(){return n.Oscillator}})}),define("dummy/classes/sampled-note",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"SampledNote",{enumerable:!0,get:function(){return n.SampledNote}})}),define("dummy/classes/sampler",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Sampler",{enumerable:!0,get:function(){return n.Sampler}})}),define("dummy/classes/sound",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Sound",{enumerable:!0,get:function(){return n.Sound}})}),define("dummy/classes/track",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"Track",{enumerable:!0,get:function(){return n.Track}})}),define("dummy/components/code-block",["exports","ember-prism/components/code-block"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=n.default
e.default=t}),define("dummy/components/code-inline",["exports","ember-prism/components/code-inline"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=n.default
e.default=t}),define("dummy/components/mp3-player",["exports","dummy/templates/components/mp3-player"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Component.extend({layout:n.default,percentPlayed:Ember.computed("track.percentPlayed",function(){var e=this.get("track.percentPlayed")
return Ember.String.htmlSafe("width: ".concat(e,"%;"))}),percentGain:Ember.computed("track.percentGain",function(){var e=this.get("track.percentGain")
return Ember.String.htmlSafe("height: ".concat(e,"%;"))}),actions:{togglePlay:function(){var e=this.get("track")
e.get("isPlaying")?e.pause():e.play()},seek:function(e){var n=e.target.offsetParent.offsetWidth,t=e.offsetX/n
this.get("track").seek(t).from("ratio")},changeVolume:function(e){var n=e.target.offsetParent.offsetHeight,t=.8*n,a=(e.pageY-Ember.$(e.target).parent().offset().top-(n-t)/2)/t
this.get("track").changeGainTo(a).from("inverseRatio")}}})
e.default=t}),define("dummy/components/xy-pad",["exports","@babel/runtime/helpers/esm/slicedToArray","dummy/templates/components/xy-pad"],function(e,n,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=Ember.Component.extend({layout:t.default,didInsertElement:function(){Ember.run.schedule("afterRender",this,"_drawGrid"),Ember.run.schedule("afterRender",this,"_drawText")},_drawText:function(){var e=this.$("canvas"),t=(0,n.default)(e,1)[0],a=t.getContext("2d")
a.fillStyle="white",a.font="24px serif",a.textAlign="left",a.save(),a.translate(0,0),a.rotate(Math.PI/2),a.fillText("Gain",10,-10),a.restore(),a.fillText("Frequency",10,t.height-10)},_drawGrid:function(){var e=this.$("canvas"),t=(0,n.default)(e,1)[0],a=t.getContext("2d"),o=t.width,i=t.height
a.strokeStyle="gray",a.strokeWidth=1,a.beginPath()
for(var s=1;s<=o/30;s++){var r=30*s
a.moveTo(r,0),a.lineTo(r,i),a.stroke()}for(var l=1;l<=i/30;l++){var c=30*l
a.moveTo(0,c),a.lineTo(o,c),a.stroke()}a.closePath()},actions:{activate:function(e){e.preventDefault(),this.send("updateCoordinates",e),this.activate()},deactivate:function(){this.deactivate()},updateCoordinates:function(e){e.preventDefault()
var t=this.$("canvas"),a=(0,n.default)(t,1)[0].getBoundingClientRect(),o=e.x||e.touches[0].screenX,i=e.y||e.touches[0].screenY,s=o-a.left,r=this.get("padSize")+-1*(i-a.top)
this.updateCoordinates(s,r)}}})
e.default=a}),define("dummy/controllers/audio-files/drum-kit",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),drums:Ember.A(),isLoading:!0,initBeats:Ember.on("init",function(){var e=this
Ember.RSVP.all([this._loadSamplerFor("kick"),this._loadSamplerFor("snare"),this._loadSamplerFor("hihat")]).then(function(){return e.set("isLoading",!1)})}),_loadSamplerFor:function(e){var n=this,t=["/ember-audio/drum-samples/".concat(e,"1.wav"),"/ember-audio/drum-samples/".concat(e,"2.wav"),"/ember-audio/drum-samples/".concat(e,"3.wav")]
return this.get("audio").load(t).asSampler(e).then(function(e){n.get("drums").pushObject(e)})},actions:{playDrum:function(e){e.play()}}})
e.default=n}),define("dummy/controllers/audio-files/mp3-player",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),selectedTrack:null,trackIsLoading:!1,tracks:[{name:"barely-there",trackInstance:null,description:'I used to play bass and sing ("clean" vocals) in a metalcore\n        band called "Bringing Down Broadway" and this is one of our songs.\n        This is from like 10 years ago (I\'m sooooo oooooollldddd).\n        The album is titled, "It\'s all Gone South", I recorded it myself, and it\n        was a commercial falure. I think it\'s awesome.'},{name:"do-wah-diddy",trackInstance:null,description:'My friend David Denison and I recorded this song in a living\n        room with a laptop and a broken logitech PC mic, for fun. This\n        is from about 8 years ago (please see comment on "Barely There" about\n        being old). David is "rapping" and I\'m singing. Please\n        keep in mind that this is from a time when "autotune" was in it\'s\n        infancy. Also, "autotune" is for assholes.'}],actions:{selectTrack:function(e){var n=this,t=this.get("audio")
this.set("selectedTrack",e),this.set("trackIsLoading",!0),t.pauseAll(),t.load("/ember-audio/".concat(e.name,".mp3")).asTrack(e.name).then(function(e){n.set("selectedTrack.trackInstance",e),n.set("trackIsLoading",!1)})}}})
e.default=n}),define("dummy/controllers/audio-files/simple",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),initAudioFiles:Ember.on("init",function(){var e=this.get("audio")
e.load("/ember-audio/Db5.mp3").asSound("note-left").then(function(e){e.changePanTo(-.7)}),e.load("https://raw.githubusercontent.com/mudcube/MIDI.js/master/examples/soundfont/acoustic_grand_piano-mp3/B5.mp3").asSound("note-right").then(function(e){e.changePanTo(.7)})}),actions:{playNoteLeft:function(){this.get("audio").getSound("note-left").play()},playNoteRight:function(){this.get("audio").getSound("note-right").play()},playBothNotes:function(){var e=this.get("audio")
e.getSound("note-left").play(),e.getSound("note-right").play()}}})
e.default=n}),define("dummy/controllers/audio-routing",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Controller.extend({audio:Ember.inject.service(),distortionEnabled:!1,initAudioFile:Ember.on("init",function(){var e=this
this.get("audio").load("/ember-audio/Eb5.mp3").asSound("distorted-piano-note").then(function(t){t.get("connections").insertAt(1,n.Connection.create({name:"distortionNode",source:"audioContext",createCommand:"createWaveShaper"})),e.set("note",t)})}),_makeDistortionCurve:function(e){for(var n="number"==typeof e?e:50,t=new Float32Array(44100),a=Math.PI/180,o=0;o<44100;++o){var i=2*o/44100-1
t[o]=(3+n)*i*20*a/(Math.PI+n*Math.abs(i))}return t},_addDistortion:function(){var e=this._makeDistortionCurve(400),n=this.get("note")
this.set("distortionEnabled",!0),n.changeGainTo(.1).from("ratio"),n.getNodeFrom("distortionNode").curve=e},_removeDistortion:function(){var e=this.get("note")
this.set("distortionEnabled",!1),e.changeGainTo(1).from("ratio"),e.getNodeFrom("distortionNode").curve=new Float32Array},actions:{playSound:function(){this.get("note").play()},toggleDistortion:function(){this.get("distortionEnabled")?this._removeDistortion():this._addDistortion()}}})
e.default=t}),define("dummy/controllers/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),initAudioFile:Ember.on("init",function(){this.get("audio").load("Eb5.mp3").asSound("piano-note")}),actions:{playSound:function(){this.get("audio").getSound("piano-note").play()}}})
e.default=n}),define("dummy/controllers/soundfonts/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),isLoading:!0,notes:null,initSoundFont:Ember.on("init",function(){var e=this
this.get("audio").load("/ember-audio/piano.js").asFont("piano").then(function(n){e.set("notes",n.get("notes").slice(39,51)),e.set("isLoading",!1)})}),actions:{playPianoNote:function(e){e.play()}}})
e.default=n}),define("dummy/controllers/synthesis/drum-kit",["exports","ember-audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Controller.extend({audio:Ember.inject.service(),drums:null,initDrums:Ember.on("init",function(){this.set("drums",[this._createKick(),this._createSnare(),this._createHihat()])}),_createKick:function(){var e=this.get("audio").createOscillator({name:"kick"}),n=e.getConnection("audioSource"),t=e.getConnection("gain")
return n.onPlayRamp("frequency").from(150).to(.01).in(.1),t.onPlayRamp("gain").from(1).to(.01).in(.1),e},_createSnare:function(){var e=this._createSnareNoise(),t=this._createSnareOscillator()
return n.LayeredSound.create({name:"snare",sounds:[e,t]})},_createSnareOscillator:function(){var e=this.get("audio").createOscillator({type:"triangle"}),n=e.getConnection("audioSource"),t=e.getConnection("gain")
return n.onPlayRamp("frequency").from(100).to(60).in(.1),t.onPlayRamp("gain").from(1).to(.01).in(.1),e},_createSnareNoise:function(){var e=this.get("audio").createWhiteNoise({name:"snare",highpassFrequency:1e3})
return e.getConnection("gain").onPlayRamp("gain").from(1).to(.001).in(.1),e},_createHihat:function(){var e=[2,3,4.16,5.43,6.79,8.21].map(this._createHihatOscillator.bind(this)).map(this._createHihatEnvelope)
return n.LayeredSound.create({name:"hihat",sounds:e})},_createHihatOscillator:function(e){return this.get("audio").createOscillator({type:"square",highpass:{frequency:7e3},bandpass:{frequency:1e4},frequency:40*e})},_createHihatEnvelope:function(e){var n=e.getConnection("gain")
return n.onPlayRamp("gain").from(1e-5).to(1).in(.02),n.onPlaySet("gain").to(.3).endingAt(.03),n.onPlaySet("gain").to(1e-5).endingAt(.3),e},actions:{playDrum:function(e){e.playFor(.1)},playBassDrop:function(){var e=this.get("audio").createOscillator(),n=e.getConnection("audioSource"),t=e.getConnection("gain")
n.onPlayRamp("frequency","linear").from(100).to(.01).in(10),t.onPlayRamp("gain").from(1).to(.01).in(10),e.playFor(10)},playSnareMeat:function(){this._createSnareOscillator().playFor(.1)},playSnareCrack:function(){this._createSnareNoise().playFor(.1)}}})
e.default=t}),define("dummy/controllers/synthesis/index",["exports","ember-audio","ember-audio/mixins"],function(e,n,t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var a=n.Oscillator.extend(t.MusicalIdentity),o=Ember.Controller.extend({audio:Ember.inject.service(),oscillators:null,initSynth:Ember.on("init",function(){var e=this.get("audio"),n=e.createNoteArray().slice(48,60).map(function(n){return a.create({frequency:n.get("frequency"),type:"square",audioContext:e.get("audioContext")})})
this.set("oscillators",n)}),actions:{startNote:function(e){e.play()},stopNote:function(e){e.get("isPlaying")&&e.stop()}}})
e.default=o}),define("dummy/controllers/synthesis/xy-pad",["exports","ember-audio/utils"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Controller.extend({audio:Ember.inject.service(),oscillator:null,padSize:300,range:{min:100,max:400},initOscillator:Ember.on("init",function(){var e=this.get("audio").createOscillator({type:"square"})
this.set("oscillator",e)}),frequency:Ember.computed("oscillator.frequency",function(){var e=this.get("oscillator.frequency")
if(e)return e.toFixed()}),gain:Ember.computed("oscillator.gain",function(){var e=this.get("oscillator.gain")
return e?e.toFixed(2):0}),_getFrequency:function(e){var n=this.get("range"),t=this.get("padSize")
return n.min+(n.max-n.min)*(e/t)},_getGain:function(e){return(0,n.exponentialRatio)(e/this.get("padSize"))},actions:{play:function(){this.get("oscillator").play()},stop:function(){var e=this.get("oscillator")
e.get("isPlaying")&&e.stop()},adjustSynthParams:function(e,n){var t=this.get("oscillator"),a=this._getFrequency(e),o=this._getGain(n)
t.update("frequency",a),t.update("gain",o)}}})
e.default=t}),define("dummy/controllers/timing/drum-machine",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),beatTracks:null,isLoading:!0,bpm:120,initBeats:Ember.on("init",function(){var e=this
Ember.RSVP.all([this._loadBeatTrackFor("kick"),this._loadBeatTrackFor("snare"),this._loadBeatTrackFor("hihat")]).then(function(n){n.map(function(e){var n=e.get("name")
e.set("numBeats",8),"snare"!==n&&"hihat"!==n||e.set("gain",.4),"hihat"===n&&e.set("pan",-.3)}),e.set("isLoading",!1),e.set("beatTracks",n)})}),_loadBeatTrackFor:function(e){return this.get("audio").load(["/ember-audio/drum-samples/".concat(e,"1.wav"),"/ember-audio/drum-samples/".concat(e,"2.wav"),"/ember-audio/drum-samples/".concat(e,"3.wav")]).asBeatTrack(e)},actions:{play:function(){var e=this
this.get("beatTracks").map(function(n){n.playActiveBeats(e.get("bpm"),1/8)})},toggleActive:function(e){e.get("active")?e.set("active",!1):(e.play(),e.set("active",!0))},engageLudicrousMode:function(){this.set("bpm",1e6),this.get("beatTracks").map(function(e){e.get("beats").map(function(e){e.set("active",!0)})})}}})
e.default=n}),define("dummy/controllers/timing/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.Controller.extend({audio:Ember.inject.service(),initSound:Ember.on("init",function(){this.get("audio").load("/ember-audio/Db5.mp3").asSound("delayed-note")}),actions:{playInOneSecond1:function(){var e=this.get("audio"),n=e.get("audioContext.currentTime")
e.getSound("delayed-note").playAt(n+1)},playInOneSecond2:function(){this.get("audio").getSound("delayed-note").playIn(1)}}})
e.default=n}),define("dummy/helpers/eq",["exports"],function(e){function n(e){return e[0]===e[1]}Object.defineProperty(e,"__esModule",{value:!0}),e.eq=n,e.default=void 0
var t=Ember.Helper.helper(n)
e.default=t}),define("dummy/helpers/undasherize",["exports"],function(e){function n(e){return e[0].split("-").join(" ")}Object.defineProperty(e,"__esModule",{value:!0}),e.undasherize=n,e.default=void 0
var t=Ember.Helper.helper(n)
e.default=t}),define("dummy/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0]
e.register("container-debug-adapter:main",n.default),e.inject("container-debug-adapter:main","namespace","application:main")}}
e.default=t})
define("dummy/resolver",["exports","ember-resolver"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=n.default
e.default=t}),define("dummy/router",["exports","dummy/config/environment"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var t=Ember.Router.extend({location:n.default.locationType,rootURL:n.default.rootURL})
t.map(function(){this.route("soundfonts",function(){this.route("notes")}),this.route("audio-files",function(){this.route("simple",{path:"/"}),this.route("mp3-player"),this.route("drum-kit")}),this.route("audio-routing"),this.route("timing",function(){this.route("drum-machine"),this.route("with-ember-audio")}),this.route("synthesis",function(){this.route("drum-kit"),this.route("xy-pad")})})
var a=t
e.default=a}),define("dummy/services/audio",["exports","ember-audio/services/audio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/templates/application",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"OFqKBGVN",block:'{"symbols":[],"statements":[[7,"nav"],[11,"class","navbar navbar-default remodal-bg"],[9],[0,"\\n  "],[7,"div"],[11,"class","container-fluid"],[9],[0,"\\n    "],[7,"div"],[11,"class","navbar-header"],[9],[0,"\\n      "],[7,"button"],[11,"class","navbar-toggle collapsed"],[11,"data-toggle","collapse"],[11,"data-target","#navbar"],[11,"aria-expanded","false"],[11,"type","button"],[9],[0,"\\n        "],[7,"span"],[11,"class","sr-only"],[9],[0,"Toggle navigation"],[10],[0,"\\n        "],[7,"span"],[11,"class","icon-bar"],[9],[10],[0,"\\n        "],[7,"span"],[11,"class","icon-bar"],[9],[10],[0,"\\n        "],[7,"span"],[11,"class","icon-bar"],[9],[10],[0,"\\n      "],[10],[0,"\\n\\n"],[4,"link-to",["index"],[["class"],["navbar-brand"]],{"statements":[[0,"        "],[7,"img"],[11,"src","/ember-audio/ember-logo-96cc57a28066aa60c12df89c146c07d5.png"],[11,"alt","Ember Logo"],[9],[10],[0,"\\n        "],[7,"span"],[9],[0,"audio"],[10],[0,"\\n"]],"parameters":[]},null],[0,"    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","collapse navbar-collapse"],[11,"id","navbar"],[9],[0,"\\n      "],[7,"ul"],[11,"class","nav navbar-nav"],[9],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[4,"link-to",["audio-files"],null,{"statements":[[0,"Audio Files"]],"parameters":[]},null],[0,"\\n        "],[10],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[4,"link-to",["soundfonts"],null,{"statements":[[0,"Sound Fonts"]],"parameters":[]},null],[0,"\\n        "],[10],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[4,"link-to",["audio-routing"],null,{"statements":[[0,"Audio Routing"]],"parameters":[]},null],[0,"\\n        "],[10],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[4,"link-to",["timing"],null,{"statements":[[0,"Timing/Scheduling"]],"parameters":[]},null],[0,"\\n        "],[10],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[4,"link-to",["synthesis"],null,{"statements":[[0,"Synthesis"]],"parameters":[]},null],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n\\n      "],[7,"ul"],[11,"class","nav navbar-nav navbar-right"],[9],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[7,"a"],[11,"href","/ember-audio/docs/index.html"],[9],[0,"API Docs"],[10],[0,"\\n        "],[10],[0,"\\n        "],[7,"li"],[9],[0,"\\n          "],[7,"a"],[11,"href","https://github.com/sethbrasile/ember-audio"],[9],[0,"\\n            "],[7,"i"],[11,"class","fa fa-github"],[11,"aria-hidden","true"],[9],[10],[0,"\\n          "],[10],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","main"],[9],[0,"\\n  "],[1,[21,"outlet"],false],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/application.hbs"}})
e.default=n}),define("dummy/templates/audio-files",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"qzZNBxh4",block:'{"symbols":[],"statements":[[7,"h1"],[9],[0,"Audio Files"],[10],[0,"\\n\\n"],[7,"ul"],[11,"class","nav nav-tabs"],[9],[0,"\\n"],[4,"link-to",["audio-files.simple"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Simple"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["audio-files.mp3-player"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"MP3 Player"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["audio-files.drum-kit"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Drum Kit Example"],[10],[0,"\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[1,[21,"outlet"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/audio-files.hbs"}})
e.default=n}),define("dummy/templates/audio-files/drum-kit",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"zgoMoVII",block:'{"symbols":["drum"],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Multisampled Drum Kit"],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Go ahead and hit the hihat a few times... Notice how each sample sounds\\n    slightly different? That\'s multisampling, baby.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n"],[4,"if",[[23,["isLoading"]]],null,{"statements":[[0,"    "],[7,"div"],[11,"class","spinner"],[9],[0,"\\n      "],[7,"div"],[11,"class","rect1"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect2"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect3"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect4"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect5"],[9],[10],[0,"\\n    "],[10],[0,"\\n"]],"parameters":[]},{"statements":[[4,"each",[[23,["drums"]]],null,{"statements":[[0,"      "],[7,"div"],[11,"class","beat-pad"],[9],[0,"\\n        "],[7,"span"],[11,"role","button"],[11,"class","text"],[9],[1,[22,1,["name"]],false],[10],[0,"\\n        "],[7,"span"],[11,"role","button"],[11,"class","pad"],[9],[3,"action",[[22,0,[]],"playDrum",[22,1,[]]]],[10],[0,"\\n      "],[10],[0,"\\n"]],"parameters":[1]},null]],"parameters":[]}],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"    "],[0,"{{#if isLoading}}\\n      "],[0,"{{!-- some loading indicator... --}}\\n    "],[0,"{{else}}\\n      "],[0,"{{#each drums as |drum|}}\\n        <div class=\\"beat-pad\\">\\n          <span class=\\"text\\">"],[0,"{{drum.name}}</span>\\n          <span class=\\"pad\\" "],[0,"{{action \\"playDrum\\" drum}}></span>\\n        </div>\\n      "],[0,"{{/each}}\\n    "],[0,"{{/if}}\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"    export default Ember.Whatever.extend({\\n      audio: Ember.inject.service(),\\n      drums: Ember.A(),\\n      isLoading: true,\\n\\n      initBeats: Ember.on(\'init\', function() {\\n        Ember.RSVP.all([\\n          this._loadSamplerFor(\'kick\'),\\n          this._loadSamplerFor(\'snare\'),\\n          this._loadSamplerFor(\'hihat\')\\n        ])\\n        .then(() => this.set(\'isLoading\', false));\\n      }),\\n\\n      _loadSamplerFor(name) {\\n        // \'snare1.wav\', \'kick2.wav\', etc..., from this project\'s public folder\\n        const drums = [`${name}1.wav`, `${name}2.wav`, `${name}3.wav`];\\n\\n        // If name === \'kick\', this creates a Sampler instance called\\n        // \'kick\' that contains the sounds \'kick1\', \'kick2\', and \'kick3\'\\n        return this.get(\'audio\').load(drums).asSampler(name).then((drum) => {\\n          this.get(\'drums\').pushObject(drum);\\n        });\\n      },\\n\\n      actions: {\\n        playDrum(drum) {\\n          drum.play();\\n        }\\n      }\\n    });\\n"]],"parameters":[]},null],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/audio-files/drum-kit.hbs"}})
e.default=n}),define("dummy/templates/audio-files/mp3-player",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"tLmSJpMh",block:'{"symbols":["track"],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"MP3 Player Example"],[10],[0,"\\n\\n  "],[7,"div"],[11,"class","track-list well clearfix"],[9],[0,"\\n    "],[7,"div"],[11,"class","col-sm-3"],[9],[0,"\\n      "],[7,"table"],[11,"class","table table-bordered"],[9],[0,"\\n        "],[7,"tbody"],[9],[0,"\\n"],[4,"each",[[23,["tracks"]]],null,{"statements":[[0,"            "],[7,"tr"],[11,"role","button"],[12,"class",[28,[[27,"if",[[27,"eq",[[22,1,[]],[23,["selectedTrack"]]],null],"info"],null]," item"]]],[9],[0,"\\n              "],[7,"td"],[9],[1,[27,"undasherize",[[22,1,["name"]]],null],false],[10],[0,"\\n            "],[3,"action",[[22,0,[]],"selectTrack",[22,1,[]]]],[10],[0,"\\n"]],"parameters":[1]},null],[0,"        "],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","description col-sm-9"],[9],[0,"\\n"],[4,"if",[[23,["selectedTrack"]]],null,{"statements":[[0,"        "],[7,"p"],[9],[1,[23,["selectedTrack","description"]],false],[10],[0,"\\n"]],"parameters":[]},{"statements":[[0,"        "],[7,"p"],[9],[0,"Select a Track..."],[10],[0,"\\n"]],"parameters":[]}],[0,"    "],[10],[0,"\\n  "],[10],[0,"\\n\\n  "],[1,[27,"mp3-player",null,[["track","loading"],[[23,["selectedTrack","trackInstance"]],[23,["trackIsLoading"]]]]],false],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[11,"class","note"],[9],[0,"\\n    Note: Purely aesthetic stuff has been removed. See repo for full code.\\n  "],[10],[0,"\\n\\n  "],[7,"h4"],[9],[0,"Template"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  <div class=\\"track-list\\">\\n    <div class=\\"select\\">\\n      <table>\\n        "],[0,"{{#each tracks as |track|}}\\n          <tbody>\\n            <tr "],[0,"{{action \\"selectTrack\\" track}}>\\n              <td>"],[0,"{{track.name}}</td>\\n            </tr>\\n          </tbody>\\n        "],[0,"{{/each}}\\n      </table>\\n    </div>\\n\\n    <div class=\\"description\\">\\n      "],[0,"{{#if selectedTrack}}\\n        <p>"],[0,"{{{selectedTrack.description}}}</p>\\n      "],[0,"{{else}}\\n        <p>Select a Track...</p>\\n      "],[0,"{{/if}}\\n    </div>\\n  </div>\\n\\n  "],[0,"{{!-- mp3-player accepts a Track instance, and a loading boolean --}}\\n  "],[0,"{{mp3-player track=selectedTrack.trackInstance loading=trackIsLoading}}\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h4"],[9],[0,"Controller"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  audio: Ember.inject.service(),\\n  trackIsLoading: false,\\n  selectedTrack: null,\\n\\n  // \\"barely-there.mp3\\" and \\"do-wah-diddy.mp3\\" are mp3 files located in this project\'s public folder\\n  tracks: [\\n    {\\n      name: \'barely-there\',\\n      trackInstance: null, // After it\'s loaded, we will place the audio data here\\n      description: `description here...`\\n    },\\n    {\\n      name: \'do-wah-diddy\',\\n      trackInstance: null,\\n      description: `description here...`\\n    }\\n  ],\\n\\n  actions: {\\n    selectTrack(track) {\\n      const audio = this.get(\'audio\');\\n\\n      this.set(\'selectedTrack\', track);\\n      this.set(\'trackIsLoading\', true);\\n\\n      // Pause any playing track so that user can\'t play multiple tracks at once\\n      audio.pauseAll();\\n\\n      // We use \\".asTrack(\'some-name\')\\" to name the sound, and to specify that we want a \\"Track\\" instance\\n      audio.load(`${track.name}.mp3`).asTrack(track.name).then((trackInstance) => {\\n        this.set(\'selectedTrack.trackInstance\', trackInstance);\\n        this.set(\'trackIsLoading\', false);\\n      });\\n    }\\n  }\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h4"],[9],[7,"code"],[9],[0,"mp3-player"],[10],[0," Component Template"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  "],[0,"{{#if loading}}\\n    "],[0,"{{!-- some loading display --}}\\n  "],[0,"{{else if track}}\\n    <div class=\\"audioplayer\\">\\n      <div class=\\"play-pause "],[0,"{{if track.isPlaying \\"playing\\"}}\\" "],[0,"{{action \\"togglePlay\\"}}><a></a></div>\\n\\n      "],[0,"{{!-- track.position and track.duration output a few different formats\\n        as a POJO. We are interested in the \\"string\\" variant --}}\\n      <div class=\\"time current\\">"],[0,"{{track.position.string}}</div>\\n\\n      "],[0,"{{!-- An action bound to \\"onclick\\" is passed a javascript native \\"MouseEvent\\" object --}}\\n      <div class=\\"bar\\" onclick="],[0,"{{action \\"seek\\"}}>\\n        <div style=\\"width: 100%;\\"></div>\\n        <div class=\\"played\\" style="],[0,"{{percentPlayed}}></div>\\n      </div>\\n\\n      <div class=\\"time duration\\">"],[0,"{{track.duration.string}}</div>\\n\\n      <div class=\\"volume\\" onclick="],[0,"{{action \\"changeVolume\\"}}>\\n        <div class=\\"button\\"><a></a></div>\\n\\n        <div class=\\"adjust\\">\\n          <div>\\n            <div style="],[0,"{{percentGain}}></div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  "],[0,"{{/if}}\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h4"],[9],[7,"code"],[9],[0,"mp3-player"],[10],[0," Component Javascript"],[10],[0,"\\n\\n  "],[7,"p"],[11,"class","note"],[9],[0,"\\n    Note that the exact measurements below will not apply to you unless your\\n    markup is identical; however, the concepts are universal.\\n    "],[7,"code"],[9],[0,"newPosition"],[10],[0," and "],[7,"code"],[9],[0,"newGain"],[10],[0," could be calculated much\\n    more easily using "],[7,"code"],[9],[0,"range"],[10],[0," inputs.\\n  "],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  percentPlayed: Ember.computed(\'track.percentPlayed\', function() {\\n    const percentPlayed = this.get(\'track.percentPlayed\');\\n    return Ember.String.htmlSafe(`width: ${percentPlayed}%;`);\\n  }),\\n\\n  percentGain: Ember.computed(\'track.percentGain\', function() {\\n    const percentGain = this.get(\'track.percentGain\');\\n    return Ember.String.htmlSafe(`height: ${percentGain}%;`);\\n  }),\\n\\n  actions: {\\n    togglePlay() {\\n      const track = this.get(\'track\');\\n\\n      if (track.get(\'isPlaying\')) {\\n        track.pause();\\n      } else {\\n        track.play()\\n      }\\n    },\\n\\n    // \\"e\\" is a javascript native \\"MouseEvent\\" object\\n    seek(e) {\\n      // Get width of clicked element\'s parent\\n      const width = e.target.offsetParent.offsetWidth;\\n\\n      // Divide click position by parent width\\n      const newPosition = e.offsetX / width;\\n\\n      // Set new position based on ratio\\n      this.get(\'track\').seek(newPosition).from(\'ratio\');\\n    },\\n\\n    changeVolume(e) {\\n      // Get height of clicked element\'s parent\\n      const height = e.target.offsetParent.offsetHeight;\\n\\n      // Get click position\\n      const offset = e.pageY - Ember.$(e.target).parent().offset().top;\\n\\n      // Adjust height because height of element is 80% of parent\'s\\n      const adjustedHeight = height * 0.8;\\n\\n      // Adjust click position because height of element is 80% of parent\'s,\\n      // and element is centered vertically\\n      const adjustedOffset = offset - ((height - adjustedHeight) / 2);\\n      const newGain = adjustedOffset / adjustedHeight;\\n\\n      // Set new gain based on inverse ratio because Y coordinate is measured\\n      // from the top, but we want gain to be measured from the bottom\\n      this.get(\'track\').changeGainTo(newGain).from(\'inverseRatio\');\\n    }\\n  }\\n"]],"parameters":[]},null],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/audio-files/mp3-player.hbs"}})
e.default=n}),define("dummy/templates/audio-files/simple",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"fUgsHr4h",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"A Simple Example"],[10],[0,"\\n\\n  "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"Play Note Panned Left"],[3,"action",[[22,0,[]],"playNoteLeft"]],[10],[0,"\\n  "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"Play Note Panned Right"],[3,"action",[[22,0,[]],"playNoteRight"]],[10],[0,"\\n  "],[7,"button"],[11,"class","btn btn-success"],[9],[0,"Play Both Notes"],[3,"action",[[22,0,[]],"playBothNotes"]],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  import Ember from \'ember\';\\n\\n  const URL = \'https://raw.githubusercontent.com/mudcube/MIDI.js/master/examples/soundfont/acoustic_grand_piano-mp3/B5.mp3\';\\n\\n  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n\\n    initAudioFiles: Ember.on(\'init\', function() {\\n      const audio = this.get(\'audio\');\\n\\n      // Db5.mp3 is an mp3 file located in this project\'s \\"public\\" folder\\n      audio.load(\'Db5.mp3\').asSound(\'note-left\').then((note) => note.changePanTo(-0.7));\\n      audio.load(URL).asSound(\'note-right\').then((note) => note.changePanTo(0.7));\\n    }),\\n\\n    actions: {\\n      playNoteLeft() {\\n        this.get(\'audio\').getSound(\'note-left\').play();\\n      },\\n\\n      playNoteRight() {\\n        this.get(\'audio\').getSound(\'note-right\').play();\\n      },\\n\\n      playBothNotes() {\\n        const audio = this.get(\'audio\');\\n        audio.getSound(\'note-left\').play();\\n        audio.getSound(\'note-right\').play();\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null]],"hasEval":false}',meta:{moduleName:"dummy/templates/audio-files/simple.hbs"}})
e.default=n}),define("dummy/templates/audio-routing",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"335+UuEJ",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h1"],[9],[0,"Audio Routing"],[10],[0,"\\n\\n  "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"Play Sound"],[3,"action",[[22,0,[]],"playSound"]],[10],[0,"\\n  "],[7,"button"],[12,"class",[28,["btn ",[27,"if",[[23,["distortionEnabled"]],"","btn-success"],null]]]],[9],[0,"\\n    Turn "],[1,[27,"if",[[23,["distortionEnabled"]],"Off","On"],null],false],[0," Distortion\\n  "],[3,"action",[[22,0,[]],"toggleDistortion"]],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    The signal path in the Web Audio API works by allowing one to stitch\\n    together various audio \\"nodes.\\" An audio node works just like a guitar pedal;\\n    It has an input, it does some stuff to whatever goes into that input, and\\n    it has an output.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    By default, a "],[7,"code"],[9],[0,"Sound"],[10],[0," instance is routed through 4 audio nodes:\\n  "],[10],[0,"\\n\\n  "],[7,"ol"],[9],[0,"\\n    "],[7,"li"],[9],[0,"\\n      "],[7,"code"],[9],[0,"Source"],[10],[0," - It\'s input is some sort of audio source; Sound\\n      loaded from a file, a synthesizer oscillator, or input from a user\'s\\n      microphone. It\'s output is digital audio data that the other audio\\n      nodes understand.\\n    "],[10],[0,"\\n    "],[7,"li"],[9],[0,"\\n      "],[7,"code"],[9],[0,"Gain"],[10],[0," - This node allows one to adjust the\\n      "],[7,"a"],[11,"href","http://www.offbeatband.com/2009/08/the-difference-between-gain-volume-level-and-loudness/"],[9],[0,"\\n        gain\\n      "],[10],[0,"\\n      of the audio data that is routed through it.\\n    "],[10],[0,"\\n    "],[7,"li"],[9],[0,"\\n      "],[7,"code"],[9],[0,"Panner"],[10],[0," - This node allows one to control the stereo pan\\n      position (left or right) of the audio data that is routed through it.\\n    "],[10],[0,"\\n    "],[7,"li"],[9],[0,"\\n      "],[7,"code"],[9],[0,"Destination"],[10],[0," - This node routes any audio data that is routed\\n      through it, to the end user\'s audio output.\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    The nodes are connected automatically, in the same order that they exist\\n    in the "],[7,"code"],[9],[0,"connections"],[10],[0," array. For the example above (the default\\n    case) they are connected like: "],[7,"code"],[9],[0,"Source"],[10],[0," -> "],[7,"code"],[9],[0,"Gain"],[10],[0,"\\n    -> "],[7,"code"],[9],[0,"Panner"],[10],[0," -> "],[7,"code"],[9],[0,"Destination"],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[11,"class","well"],[9],[0,"\\n    There are many more "],[7,"code"],[9],[0,"AudioNode"],[10],[0," types provided by the Web Audio\\n    API than the ones that are represented here. Take a look at the\\n    "],[7,"a"],[11,"href","https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API"],[9],[0,"\\n      Web Audio API Documentation\\n    "],[10],[0,"\\n    to learn about all of the available "],[7,"code"],[9],[0,"AudioNode"],[10],[0," types.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    It is possible to customize routing by adding and removing audio nodes from\\n    a "],[7,"code"],[9],[0,"Sound"],[10],[0," instance\'s "],[7,"code"],[9],[0,"connections"],[10],[0," array.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    The "],[7,"code"],[9],[0,"connections"],[10],[0," array is an "],[7,"code"],[9],[0,"Ember.MutableArray"],[10],[0,"\\n    so it is easily manipulated using it\'s prototype methods such as\\n    "],[7,"code"],[9],[0,"insertAt"],[10],[0," and "],[7,"code"],[9],[0,"removeAt"],[10],[0,".\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    A "],[7,"code"],[9],[0,"Sound"],[10],[0," instance also has a convenience method called\\n    "],[7,"code"],[9],[0,"removeConnection"],[10],[0," that allows one to remove a connection by it\'s\\n    "],[7,"code"],[9],[0,"name"],[10],[0,".\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"    <button class=\\"btn btn-primary\\" "],[0,"{{action \\"playSound\\"}}>Play Sound</button>\\n    <button class=\\"btn "],[0,"{{if distortionEnabled \\"btn-warning\\" \\"btn-success\\"}}\\" "],[0,"{{action \\"toggleDistortion\\"}}>\\n      Turn "],[0,"{{if distortionEnabled \\"Off\\" \\"On\\"}} Distortion\\n    </button>\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"    import Ember from \'ember\';\\n    import { Connection } from \'ember-audio\';\\n\\n    export default Ember.Whatever.extend({\\n      audio: Ember.inject.service(),\\n      distortionEnabled: false,\\n\\n      initAudioFile: Ember.on(\'init\', function() {\\n        // Eb5.mp3 is an mp3 file located in the \\"public\\" folder\\n        this.get(\'audio\').load(\'/ember-audio/Eb5.mp3\').asSound(\'piano-note\').then((note) => {\\n\\n          // Create the connection and insert it into the note\'s connections array\\n          note.get(\'connections\').insertAt(1, Connection.create({\\n            name: \'distortionNode\',\\n            source: \'audioContext\',\\n            createCommand: \'createWaveShaper\'\\n          }));\\n\\n          this.set(\'note\', note);\\n        });\\n      }),\\n\\n      _makeDistortionCurve(amount) {\\n        // I stole this straight from the Mozilla Web Audio API docs site\\n        const k = typeof amount === \'number\' ? amount : 50;\\n        const n_samples = 44100;\\n        const curve = new Float32Array(n_samples);\\n        const deg = Math.PI / 180;\\n\\n        for (let i = 0; i < n_samples; ++i) {\\n          let x = i * 2 / n_samples - 1;\\n          curve[i] = ( 3 + k ) * x * 20 * deg / ( Math.PI + k * Math.abs(x) );\\n        }\\n\\n        return curve;\\n      },\\n\\n      _addDistortion() {\\n        const curve = this._makeDistortionCurve(400);\\n        const note = this.get(\'note\');\\n\\n        this.set(\'distortionEnabled\', true);\\n\\n        // lower note\'s gain because distorted signal has much more apparent volume\\n        note.changeGainTo(0.1).from(\'ratio\');\\n\\n        // Set distortionNode\'s curve to enable distortion\\n        note.getNodeFrom(\'distortionNode\').curve = curve;\\n      },\\n\\n      _removeDistortion() {\\n        const note = this.get(\'note\');\\n\\n        this.set(\'distortionEnabled\', false);\\n\\n        // raise note\'s gain because clean signal has much less apparent volume\\n        note.changeGainTo(1).from(\'ratio\');\\n\\n        // Set distortionNode\'s curve to an empty Float32Array to disable distortion\\n        note.getNodeFrom(\'distortionNode\').curve = new Float32Array();\\n      },\\n\\n      actions: {\\n        playSound() {\\n          this.get(\'note\').play();\\n        },\\n\\n        toggleDistortion() {\\n          if (this.get(\'distortionEnabled\')) {\\n            this._removeDistortion();\\n          } else {\\n            this._addDistortion();\\n          }\\n        }\\n      }\\n    });\\n"]],"parameters":[]},null],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/audio-routing.hbs"}})
e.default=n}),define("dummy/templates/components/code-block",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"ADDY8kKq",block:'{"symbols":["&default"],"statements":[[7,"code"],[12,"class",[21,"languageClass"]],[9],[14,1],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/code-block.hbs"}})
e.default=n}),define("dummy/templates/components/mp3-player",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"N2IAatev",block:'{"symbols":[],"statements":[[4,"if",[[23,["loading"]]],null,{"statements":[[0,"  "],[7,"div"],[11,"class","spinner"],[9],[0,"\\n    "],[7,"div"],[11,"class","rect1"],[9],[10],[0,"\\n    "],[7,"div"],[11,"class","rect2"],[9],[10],[0,"\\n    "],[7,"div"],[11,"class","rect3"],[9],[10],[0,"\\n    "],[7,"div"],[11,"class","rect4"],[9],[10],[0,"\\n    "],[7,"div"],[11,"class","rect5"],[9],[10],[0,"\\n  "],[10],[0,"\\n"]],"parameters":[]},{"statements":[[4,"if",[[23,["track"]]],null,{"statements":[[0,"  "],[7,"div"],[11,"class","audioplayer"],[9],[0,"\\n    "],[7,"div"],[11,"role","button"],[12,"class",[28,["play-pause ",[27,"if",[[23,["track","isPlaying"]],"playing"],null]]]],[9],[7,"a"],[9],[10],[3,"action",[[22,0,[]],"togglePlay"]],[10],[0,"\\n    "],[7,"div"],[11,"class","time current"],[9],[1,[23,["track","position","string"]],false],[10],[0,"\\n\\n    "],[7,"div"],[11,"role","button"],[11,"class","bar"],[12,"onclick",[27,"action",[[22,0,[]],"seek"],null]],[9],[0,"\\n      "],[7,"div"],[11,"style","width: 100%;"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","played"],[12,"style",[21,"percentPlayed"]],[9],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","time duration"],[9],[1,[23,["track","duration","string"]],false],[10],[0,"\\n\\n    "],[7,"div"],[11,"role","button"],[11,"class","volume"],[12,"onclick",[27,"action",[[22,0,[]],"changeVolume"],null]],[9],[0,"\\n      "],[7,"div"],[11,"class","button"],[9],[7,"a"],[9],[10],[10],[0,"\\n\\n      "],[7,"div"],[11,"class","adjust"],[9],[0,"\\n        "],[7,"div"],[9],[0,"\\n          "],[7,"div"],[12,"style",[21,"percentGain"]],[9],[10],[0,"\\n        "],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"]],"parameters":[]},null]],"parameters":[]}]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/mp3-player.hbs"}})
e.default=n}),define("dummy/templates/components/xy-pad",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"mujDHl/x",block:'{"symbols":[],"statements":[[7,"canvas"],[12,"width",[21,"padSize"]],[12,"height",[21,"padSize"]],[11,"style","background-color: black;"],[12,"onmousedown",[27,"action",[[22,0,[]],"activate"],null]],[12,"onmousemove",[27,"action",[[22,0,[]],"updateCoordinates"],null]],[12,"onmouseleave",[27,"action",[[22,0,[]],"deactivate"],null]],[12,"onmouseup",[27,"action",[[22,0,[]],"deactivate"],null]],[12,"ontouchstart",[27,"action",[[22,0,[]],"activate"],null]],[12,"ontouchmove",[27,"action",[[22,0,[]],"updateCoordinates"],null]],[12,"ontouchend",[27,"action",[[22,0,[]],"deactivate"],null]],[12,"ontouchcancel",[27,"action",[[22,0,[]],"deactivate"],null]],[9],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/xy-pad.hbs"}})
e.default=n}),define("dummy/templates/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"DqpVKYoT",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h1"],[9],[0,"Ember Audio"],[10],[0,"\\n  "],[7,"h3"],[9],[0,"Making the Web Audio API super EZ since 2016"],[10],[0,"\\n\\n  "],[7,"hr"],[9],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Ember Audio provides an "],[7,"code"],[9],[0,"audio"],[10],[0," service and various\\n    classes/mixins that make working with the Web Audio API super EZ.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Ember Audio aims to simplify sampling, triggering, routing, scheduling,\\n    synthesizing, soundfonts, and working with audio in-general.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n\\n  "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"Play Sound"],[3,"action",[[22,0,[]],"playSound"]],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n\\n    initAudioFile: Ember.on(\'init\', function() {\\n      // Eb5.mp3 is an mp3 file located in the \\"public\\" folder\\n      this.get(\'audio\').load(\'Eb5.mp3\').asSound(\'piano-note\');\\n    }),\\n\\n    actions: {\\n      playSound() {\\n        this.get(\'audio\').getSound(\'piano-note\').play();\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null],[0,"\\n"],[10],[0,"\\n\\n"],[7,"hr"],[9],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Please make suggestions for more features or changes to the API by creating\\n    an issue or pinging me on the ember community slack (@sethbrasile)\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","buy-beer content"],[9],[0,"\\n  "],[7,"h5"],[9],[0,"Buy Seth Brasile a Beer"],[10],[0,"\\n\\n  "],[7,"form"],[11,"action","https://www.paypal.com/cgi-bin/webscr"],[11,"method","post"],[11,"target","_top"],[9],[0,"\\n    "],[7,"input"],[11,"name","cmd"],[11,"value","_s-xclick"],[11,"type","hidden"],[9],[10],[0,"\\n    "],[7,"input"],[11,"name","hosted_button_id"],[11,"value","QDPUK852HN9U2"],[11,"type","hidden"],[9],[10],[0,"\\n    "],[7,"input"],[11,"src","https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif"],[11,"border","0"],[11,"name","submit"],[11,"alt","PayPal - The safer, easier way to pay online!"],[11,"type","image"],[9],[10],[0,"\\n    "],[7,"img"],[11,"alt",""],[11,"border","0"],[11,"src","https://www.paypalobjects.com/en_US/i/scr/pixel.gif"],[11,"width","1"],[11,"height","1"],[9],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/index.hbs"}})
e.default=n}),define("dummy/templates/soundfonts",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"Mpu3oO9l",block:'{"symbols":[],"statements":[[7,"h1"],[9],[0,"Soundfonts"],[10],[0,"\\n\\n"],[7,"ul"],[11,"class","nav nav-tabs"],[9],[0,"\\n"],[4,"link-to",["soundfonts.index"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Example"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["soundfonts.notes"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Note Objects"],[10],[0,"\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[1,[21,"outlet"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/soundfonts.hbs"}})
e.default=n}),define("dummy/templates/soundfonts/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"EFjqbLVa",block:'{"symbols":["note"],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Play a Soundfont"],[10],[0,"\\n"],[4,"if",[[23,["isLoading"]]],null,{"statements":[[0,"    "],[7,"div"],[11,"class","spinner"],[9],[0,"\\n      "],[7,"div"],[11,"class","rect1"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect2"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect3"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect4"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect5"],[9],[10],[0,"\\n    "],[10],[0,"\\n"]],"parameters":[]},{"statements":[[0,"    "],[7,"div"],[11,"id","piano"],[9],[0,"\\n      "],[7,"ol"],[9],[0,"\\n"],[4,"each",[[23,["notes"]]],null,{"statements":[[0,"          "],[7,"li"],[11,"role","button"],[12,"class",[27,"if",[[22,1,["accidental"]],"black"],null]],[9],[0,"\\n            "],[1,[22,1,["name"]],false],[0,"\\n          "],[3,"action",[[22,0,[]],"playPianoNote",[22,1,[]]],[["on"],["touchStart"]]],[3,"action",[[22,0,[]],"playPianoNote",[22,1,[]]],[["on"],["mouseDown"]]],[10],[0,"\\n"]],"parameters":[1]},null],[0,"      "],[10],[0,"\\n    "],[10],[0,"\\n"]],"parameters":[]}],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    "],[7,"strong"],[9],[0,"Important Note"],[10],[0,": Soundfonts are javascript files, so if you\\n    keep your soundfonts inside your project, ember-cli is going to minify them.\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    This is not ok.\\n    "],[7,"a"],[11,"href","http://ember-cli.com/user-guide/#minifying"],[9],[0,"\\n      Exclude your soundfonts from minification.\\n    "],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  "],[0,"{{#if isLoading}}\\n    "],[0,"{{!-- Some loading indicator... --}}\\n  "],[0,"{{else}}\\n    <div id=\\"piano\\">\\n      <ol>\\n        "],[0,"{{#each notes as |note|}}\\n          <li class="],[0,"{{if note.accidental \\"black\\"}}\\n            "],[0,"{{!-- Specify both action types so multitouch works on touch devices --}}\\n            "],[0,"{{action \\"playPianoNote\\" note on=\\"touchStart\\"}}\\n            "],[0,"{{action \\"playPianoNote\\" note on=\\"mouseDown\\"}}\\n          >\\n            "],[0,"{{note.name}}\\n          </li>\\n        "],[0,"{{/each}}\\n      </ol>\\n    </div>\\n  "],[0,"{{/if}}\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n    isLoading: false,\\n    notes: null,\\n\\n    initSoundFont: on(\'init\', function() {\\n      // piano.js is a soundfont created with MIDI.js\' Ruby-based soundfont converter\\n      this.get(\'audio\').load(\'/ember-audio/piano.js\').asFont(\'piano\')\\n        .then((font) => {\\n          // Slicing just so the whole keyboard doesn\'t show up on the screen\\n          this.set(\'notes\', font.get(\'notes\').slice(39, 51));\\n          this.set(\'isLoading\', false);\\n        });\\n    }),\\n\\n    actions: {\\n      playPianoNote(note) {\\n        note.play();\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/soundfonts/index.hbs"}})
e.default=n}),define("dummy/templates/soundfonts/notes",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"8n38y14j",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h1"],[9],[0,"Note Objects"],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Note objects returned from the "],[7,"code"],[9],[0,"asFont"],[10],[0," method are plain\\n    "],[7,"code"],[9],[0,"Ember.Object"],[10],[0,"s. Using the note "],[7,"code"],[9],[0,"Ab1"],[10],[0," as an example,\\n    here is what getting these attributes will look like:\\n  "],[10],[0,"\\n\\n  "],[7,"ul"],[9],[0,"\\n    "],[7,"li"],[9],[7,"code"],[9],[0,"note.get(\'letter\')"],[10],[0,": A"],[10],[0,"\\n    "],[7,"li"],[9],[7,"code"],[9],[0,"note.get(\'accidental\')"],[10],[0,": b"],[10],[0,"\\n    "],[7,"li"],[9],[7,"code"],[9],[0,"note.get(\'octave\')"],[10],[0,": 1"],[10],[0,"\\n    "],[7,"li"],[9],[7,"code"],[9],[0,"note.get(\'identifier\')"],[10],[0,": Ab1"],[10],[0,"\\n    "],[7,"li"],[9],[7,"code"],[9],[0,"note.get(\'name\')"],[10],[0,": Ab"],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/soundfonts/notes.hbs"}})
e.default=n}),define("dummy/templates/synthesis",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"FWeYCxI8",block:'{"symbols":[],"statements":[[7,"h1"],[9],[0,"Synthesis"],[10],[0,"\\n\\n"],[7,"ul"],[11,"class","nav nav-tabs"],[9],[0,"\\n"],[4,"link-to",["synthesis.index"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Simple"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["synthesis.drum-kit"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Drum Kit"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["synthesis.xy-pad"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"XY Pad"],[10],[0,"\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[1,[21,"outlet"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/synthesis.hbs"}})
e.default=n}),define("dummy/templates/synthesis/drum-kit",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"okvuuTXM",block:'{"symbols":["drum"],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Synthesized Drum Kit"],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n"],[4,"each",[[23,["drums"]]],null,{"statements":[[0,"    "],[7,"div"],[11,"class","beat-pad"],[9],[0,"\\n      "],[7,"span"],[11,"class","text"],[9],[1,[22,1,["name"]],false],[10],[0,"\\n      "],[7,"span"],[11,"role","button"],[11,"class","pad"],[9],[3,"action",[[22,0,[]],"playDrum",[22,1,[]]],[["on"],["touchStart"]]],[3,"action",[[22,0,[]],"playDrum",[22,1,[]]],[["on"],["mouseDown"]]],[10],[0,"\\n    "],[10],[0,"\\n"]],"parameters":[1]},null],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Synthesis is a pretty complex topic. For the most part, it\'s all about\\n    filtering oscillators and controlling gain (controlling gain is referred to\\n    as controlling\\n    "],[7,"a"],[11,"href","https://en.wikipedia.org/wiki/Synthesizer#Attack_Decay_Sustain_Release_.28ADSR.29_envelope"],[9],[0,"\\n      envelope\\n    "],[10],[0,"\\n    in synth-land).\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    In order to synthesize a drum sound, we can create an oscillator, play the\\n    oscillator in short bursts, and transform the envelope very quickly before\\n    the sound is stopped.\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Here\'s the function that outputs the kick sound from the beat-pads above:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  _createKick() {\\n    const audio = this.get(\'audio\');\\n    const kick = audio.createOscillator({ name: \'kick\' });\\n    const osc = kick.getConnection(\'audioSource\');\\n    const gain = kick.getConnection(\'gain\');\\n\\n    osc.onPlayRamp(\'frequency\').from(150).to(0.01).in(0.1);\\n    gain.onPlayRamp(\'gain\').from(1).to(0.01).in(0.1);\\n\\n    return kick;\\n  }\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    A "],[7,"code"],[9],[0,"Connection"],[10],[0," instance has a method called\\n    "],[7,"code"],[9],[0,"onPlayRamp"],[10],[0," that lets us set a starting value, then use\\n    "],[7,"a"],[11,"href","https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime"],[9],[0,"\\n      exponentialRampToValueAtTime\\n    "],[10],[0,"\\n    to ramp up/down to another value, each time the oscillator is played.\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    By doing:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  osc.onPlayRamp(\'frequency\').from(150).to(0.01).in(0.1);\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Each time the oscillator is played, we are setting it\'s frequency to 150Hz,\\n    then ramping it down to 0.01Hz over the course of 0.1 seconds.\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    We can make some adjustments and end up with a \\"bass drop.\\"\\n  "],[10],[0,"\\n  "],[7,"p"],[11,"class","note"],[9],[0,"\\n    (If your speakers are turned up, you should probably turn them down, and\\n    you probably can\'t even hear this if you\'re on a laptop :D)\\n  "],[10],[0,"\\n\\n  "],[7,"button"],[11,"class","btn btn-danger"],[9],[0,"Play Bass Drop"],[3,"action",[[22,0,[]],"playBassDrop"]],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  playBassDrop() {\\n    const audio = this.get(\'audio\');\\n    const bassDrop = audio.createOscillator();\\n    const osc = bassDrop.getConnection(\'audioSource\');\\n    const gain = bassDrop.getConnection(\'gain\');\\n\\n    // We can specify \'linear\' to get a linear ramp instead of an exponential one\\n    osc.onPlayRamp(\'frequency\', \'linear\').from(100).to(0.01).in(10);\\n\\n    // We automate gain as well, so we don\'t end up with a loud click when the audio stops\\n    gain.onPlayRamp(\'gain\').from(1).to(0.01).in(10);\\n\\n    bassDrop.playFor(10);\\n  }\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    The snare and hihat sounds use the same concepts, but they\'re a bit more\\n    complex.\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    For the snare, we create an oscillator that mimics the \\"meat\\" of the snare\\n    tone. It\'s similar to the kick sound, but doesn\'t drop as low. We also create\\n    a Sound instance that\'s loaded up with \\"white noise\\" that we use to mimic\\n    the \\"crack\\" of the snare (the \\"snares\\" on the bottom of the snare).\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    We shape the \\"envelope\\" of each, then layer the two sounds together.\\n  "],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    In case you\'re curious, here are both sounds individually.\\n  "],[10],[0,"\\n\\n  "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"\\n    Play Snare Meat\\n  "],[3,"action",[[22,0,[]],"playSnareMeat"]],[10],[0,"\\n\\n  "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"\\n    Play Snare Crack\\n  "],[3,"action",[[22,0,[]],"playSnareCrack"]],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  _createSnare() {\\n    const oscillator = this._createSnareOscillator();\\n    const noise = this._createSnareNoise();\\n\\n    // A LayeredSound instance lets us stack multiple sounds to be played at once\\n    return LayeredSound.create({ name: \'snare\', sounds: [ noise, oscillator ] });\\n  },\\n\\n  _createSnareOscillator() {\\n    const audio = this.get(\'audio\');\\n    const snare = audio.createOscillator({ type: \'triangle\' });\\n    const oscillator = snare.getConnection(\'audioSource\');\\n    const gain = snare.getConnection(\'gain\');\\n\\n    oscillator.onPlayRamp(\'frequency\').from(100).to(60).in(0.1);\\n    gain.onPlayRamp(\'gain\').from(1).to(0.01).in(0.1);\\n\\n    return snare;\\n  },\\n\\n  _createSnareNoise() {\\n    const audio = this.get(\'audio\');\\n    const noise = audio.createWhiteNoise({ name: \'snare\', highpassFrequency: 1000 });\\n    const gain = noise.getConnection(\'gain\');\\n\\n    gain.onPlayRamp(\'gain\').from(1).to(0.001).in(0.1);\\n\\n    return noise;\\n  }\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    For the hihat, we create an oscillator for each of 6 different overtones of\\n    a fundamental frequency (in our case, we\'re using "],[7,"code"],[9],[0,"40"],[10],[0,"). We\\n    heavily filter each oscillator, then shape the envelope for each so that\\n    the gain ramps up and back down very quickly, then layer them all together.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  _createHihat() {\\n    // http://joesul.li/van/synthesizing-hi-hats/\\n    const overtones = [ 2, 3, 4.16, 5.43, 6.79, 8.21 ];\\n\\n    const oscillators = overtones\\n      // Create an oscillator for each overtone\\n      .map(this._createHihatOscillator.bind(this))\\n\\n      // Shape the envelope for each oscillator\\n      .map(this._createHihatEnvelope);\\n\\n    // Layer them all together\\n    return LayeredSound.create({ name: \'hihat\', sounds: oscillators });\\n  },\\n\\n  _createHihatOscillator(ratio) {\\n    const fundamental = 40;\\n\\n    return this.get(\'audio\').createOscillator({\\n      type: \'square\',\\n      highpass: { frequency: 7000 },\\n      bandpass: { frequency: 10000 },\\n      frequency: fundamental * ratio\\n    });\\n  },\\n\\n  _createHihatEnvelope(oscillator) {\\n    const gain = oscillator.getConnection(\'gain\');\\n\\n    gain.onPlayRamp(\'gain\').from(0.00001).to(1).in(0.02);\\n\\n    gain.onPlaySet(\'gain\').to(0.3).endingAt(0.03);\\n    gain.onPlaySet(\'gain\').to(0.00001).endingAt(0.3);\\n\\n    return oscillator;\\n  }\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Here\'s the full code for the synthesized drum kit example:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  "],[0,"{{#each drums as |drum|}}\\n    <div class=\\"beat-pad\\">\\n      <span class=\\"text\\">"],[0,"{{drum.name}}</span>\\n      <span class=\\"pad\\"\\n        "],[0,"{{action \\"playDrum\\" drum on=\\"touchStart\\"}}\\n        "],[0,"{{action \\"playDrum\\" drum on=\\"mouseDown\\"}}></span>\\n    </div>\\n  "],[0,"{{/each}}\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  import Ember from \'ember\';\\n  import { LayeredSound } from \'ember-audio\';\\n\\n  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n    drums: null,\\n\\n    initDrums: Ember.on(\'init\', function() {\\n      this.set(\'drums\', [\\n        this._createKick(),\\n        this._createSnare(),\\n        this._createHihat()\\n      ]);\\n    }),\\n\\n    _createKick() {\\n      const audio = this.get(\'audio\');\\n      const kick = audio.createOscillator({ name: \'kick\' });\\n      const osc = kick.getConnection(\'audioSource\');\\n      const gain = kick.getConnection(\'gain\');\\n\\n      osc.onPlayRamp(\'frequency\').from(150).to(0.01).in(0.1);\\n      gain.onPlayRamp(\'gain\').from(1).to(0.01).in(0.1);\\n\\n      return kick;\\n    },\\n\\n    _createSnare() {\\n      const noise = this._createSnareNoise();\\n      const oscillator = this._createSnareOscillator();\\n\\n      return LayeredSound.create({ name: \'snare\', sounds: [ noise, oscillator ] });\\n    },\\n\\n    _createSnareOscillator() {\\n      const audio = this.get(\'audio\');\\n      const snare = audio.createOscillator({ type: \'triangle\' });\\n      const oscillator = snare.getConnection(\'audioSource\');\\n      const gain = snare.getConnection(\'gain\');\\n\\n      oscillator.onPlayRamp(\'frequency\').from(100).to(60).in(0.1);\\n      gain.onPlayRamp(\'gain\').from(1).to(0.01).in(0.1);\\n\\n      return snare;\\n    },\\n\\n    _createSnareNoise() {\\n      const audio = this.get(\'audio\');\\n      const noise = audio.createWhiteNoise({ name: \'snare\', highpassFrequency: 1000 });\\n      const gain = noise.getConnection(\'gain\');\\n\\n      gain.onPlayRamp(\'gain\').from(1).to(0.001).in(0.1);\\n\\n      return noise;\\n    },\\n\\n    _createHihat() {\\n      // http://joesul.li/van/synthesizing-hi-hats/\\n      const ratios = [ 2, 3, 4.16, 5.43, 6.79, 8.21 ];\\n\\n      const oscillators = ratios\\n        .map(this._createHihatOscillator.bind(this))\\n        .map(this._createHihatEnvelope);\\n\\n      return LayeredSound.create({ name: \'hihat\', sounds: oscillators });\\n    },\\n\\n    _createHihatOscillator(ratio) {\\n      const fundamental = 40;\\n\\n      return this.get(\'audio\').createOscillator({\\n        type: \'square\',\\n        highpass: { frequency: 7000 },\\n        bandpass: { frequency: 10000 },\\n        frequency: fundamental * ratio\\n      });\\n    },\\n\\n    _createHihatEnvelope(oscillator) {\\n      const gain = oscillator.getConnection(\'gain\');\\n\\n      gain.onPlayRamp(\'gain\').from(0.00001).to(1).in(0.02);\\n\\n      gain.onPlaySet(\'gain\').to(0.3).endingAt(0.03);\\n      gain.onPlaySet(\'gain\').to(0.00001).endingAt(0.3);\\n\\n      return oscillator;\\n    },\\n\\n    actions: {\\n      playDrum(drum) {\\n        // Only play for 0.1 seconds so that playing in quick succession doesn\'t\\n        // result in distortion\\n        drum.playFor(0.1);\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null]],"hasEval":false}',meta:{moduleName:"dummy/templates/synthesis/drum-kit.hbs"}})
e.default=n}),define("dummy/templates/synthesis/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"rruYEoPf",block:'{"symbols":["note"],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Simple Polyphonic Synthesizer"],[10],[0,"\\n\\n  "],[7,"div"],[11,"id","piano"],[9],[0,"\\n    "],[7,"ol"],[9],[0,"\\n"],[4,"each",[[23,["oscillators"]]],null,{"statements":[[0,"        "],[7,"li"],[11,"role","button"],[12,"class",[27,"if",[[22,1,["accidental"]],"black"],null]],[9],[0,"\\n\\n          "],[1,[22,1,["name"]],false],[0,"\\n        "],[3,"action",[[22,0,[]],"startNote",[22,1,[]]],[["on"],["touchStart"]]],[3,"action",[[22,0,[]],"startNote",[22,1,[]]],[["on"],["mouseDown"]]],[3,"action",[[22,0,[]],"stopNote",[22,1,[]]],[["on"],["touchEnd"]]],[3,"action",[[22,0,[]],"stopNote",[22,1,[]]],[["on"],["mouseUp"]]],[3,"action",[[22,0,[]],"stopNote",[22,1,[]]],[["on"],["mouseLeave"]]],[10],[0,"\\n"]],"parameters":[1]},null],[0,"    "],[10],[0,"\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    This is a great example of the use of some of Ember Audio\'s classes/mixins.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    In order to create oscillators that have a \\"musical identity\\" (as in, each\\n    oscillator represents a \\"note\\" that can be played), we will add the\\n    "],[7,"code"],[9],[0,"MusicalIdentity"],[10],[0," mixin to the "],[7,"code"],[9],[0,"Oscillator"],[10],[0," class:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  import { Oscillator } from \'ember-audio\';\\n  import { MusicalIdentity } from \'ember-audio/mixins\';\\n\\n  const MusicallyAwareOscillator = Oscillator.extend(MusicalIdentity);\\n\\n  export default Ember.Whatever.extend({\\n    someFunction() {\\n      const audioContext = this.get(\'audio.audioContext\');\\n\\n      const oscillator = MusicallyAwareOscillator.create({\\n        audioContext,\\n        frequency: 415.3\\n      });\\n\\n      console.log(oscillator.get(\'identifier\')); // logs \'Ab4\'\\n    }\\n  });\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    By passing it a "],[7,"code"],[9],[0,"frequency"],[10],[0,", all of it\'s other properties are\\n    calculated for us.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    The inverse is also true:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  const oscillator = MusicallyAwareOscillator.create({\\n    audioContext,\\n    identifier: \'Ab4\'\\n  });\\n\\n  console.log(oscillator.get(\'frequency\')); // logs \'415.3\'\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Here is the complete code for the keyboard above:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  <div id=\\"piano\\">\\n    <ol>\\n      "],[0,"{{#each oscillators as |note|}}\\n        <li class="],[0,"{{if note.accidental \\"black\\"}}\\n          "],[0,"{{!-- These are to make it play like a \\"keyboard\\" on touch devices\\n            and I\'m sure there\'s a more elegant way to handle it ¯\\\\_(ツ)_/¯ --}}\\n          "],[0,"{{action \\"startNote\\" note on=\\"touchStart\\"}}\\n          "],[0,"{{action \\"startNote\\" note on=\\"mouseDown\\"}}\\n          "],[0,"{{action \\"stopNote\\" note on=\\"touchEnd\\"}}\\n          "],[0,"{{action \\"stopNote\\" note on=\\"mouseUp\\"}}\\n          "],[0,"{{action \\"stopNote\\" note on=\\"mouseLeave\\"}}>\\n          "],[0,"{{note.name}}\\n        </li>\\n      "],[0,"{{/each}}\\n    </ol>\\n  </div>\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  import Ember from \'ember\';\\n  import { Oscillator } from \'ember-audio\';\\n  import { MusicalIdentity } from \'ember-audio/mixins\';\\n\\n  // By mixing the MusicalIdentity mixin into the Oscillator class, we get an\\n  // oscillator that is aware of it\'s frequency, letter, accidental, octave, etc...\\n  const MusicallyAwareOscillator = Oscillator.extend(MusicalIdentity);\\n\\n  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n    oscillators: null, // Put oscillators here after they\'re created\\n\\n    initSynth: Ember.on(\'init\', function() {\\n      const audio = this.get(\'audio\');\\n\\n      // Outputs an array of all the notes on a standard \\"western\\" piano\\n      // Could also do `audio.createNoteArray(notes)` where notes is a POJO,\\n      // or `audio.load(URL).asNoteArray().then(...)` providing a URL to a JSON file\\n      // See `utils/frequencyMap` for an example of what these might look like.\\n      const notes = audio.createNoteArray();\\n\\n      // Slicing so that the keyboard isn\'t massive\\n      const slicedNotes = notes.slice(48, 60);\\n\\n      // Create a MusicallyAwareOscillator instance for each note in slicedNotes\\n      const oscillators = slicedNotes.map((note) => {\\n        return MusicallyAwareOscillator.create({\\n          type: \'square\', // the \\"shape\\" of the waveform\\n          frequency: note.get(\'frequency\'),\\n          audioContext: audio.get(\'audioContext\')\\n        });\\n      });\\n\\n      this.set(\'oscillators\', oscillators);\\n    }),\\n\\n    actions: {\\n      startNote(note) {\\n        note.play();\\n      },\\n\\n      stopNote(note) {\\n        if (note.get(\'isPlaying\')) {\\n          note.stop();\\n        }\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null]],"hasEval":false}',meta:{moduleName:"dummy/templates/synthesis/index.hbs"}})
e.default=n}),define("dummy/templates/synthesis/xy-pad",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"11vfbU/7",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"XY Pad"],[10],[0,"\\n\\n  "],[1,[27,"xy-pad",null,[["padSize","updateCoordinates","activate","deactivate"],[[23,["padSize"]],[27,"action",[[22,0,[]],"adjustSynthParams"],null],[27,"action",[[22,0,[]],"play"],null],[27,"action",[[22,0,[]],"stop"],null]]]],false],[0,"\\n\\n  "],[7,"p"],[9],[0,"Frequency: "],[1,[21,"frequency"],false],[10],[0,"\\n  "],[7,"p"],[9],[0,"Gain: "],[1,[21,"gain"],false],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"p"],[9],[0,"Template"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  "],[0,"{{xy-pad\\n    padSize=padSize\\n    updateCoordinates=\\"adjustSynthParams\\"\\n    activate=\\"play\\"\\n    deactivate=\\"stop\\"\\n  }}\\n\\n  <p>Frequency: "],[0,"{{frequency}}</p>\\n  <p>Gain: "],[0,"{{gain}}</p>\\n"]],"parameters":[]},null],[0,"\\n"],[7,"p"],[9],[0,"Controller"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  import Ember from \'ember\';\\n  import { exponentialRatio } from \'ember-audio/utils\';\\n\\n  export default Ember.Controller.extend({\\n    audio: Ember.inject.service(),\\n    oscillator: null,\\n    padSize: 300,\\n    range: { min: 100, max: 400 },\\n\\n    initOscillator: Ember.on(\'init\', function() {\\n      const oscillator = this.get(\'audio\').createOscillator({ type: \'square\' });\\n      this.set(\'oscillator\', oscillator);\\n    }),\\n\\n    frequency: Ember.computed(\'oscillator.frequency\', function() {\\n      const frequency = this.get(\'oscillator.frequency\');\\n\\n      if (frequency) {\\n        return frequency.toFixed();\\n      }\\n    }),\\n\\n    gain: Ember.computed(\'oscillator.gain\', function() {\\n      const gain = this.get(\'oscillator.gain\');\\n\\n      if (gain) {\\n        return gain.toFixed(2);\\n      } else {\\n        return 0;\\n      }\\n    }),\\n\\n    _getFrequency(x) {\\n      const range = this.get(\'range\');\\n      const padSize = this.get(\'padSize\');\\n\\n      return range.min + (range.max - range.min) * (x / padSize);\\n    },\\n\\n    _getGain(y) {\\n      // Human senses are not linear.\\n      // http://stackoverflow.com/questions/1165026/what-algorithms-could-i-use-for-audio-volume-level\\n      return exponentialRatio(y / this.get(\'padSize\'));\\n    },\\n\\n    actions: {\\n      play() {\\n        this.get(\'oscillator\').play();\\n      },\\n\\n      stop() {\\n        const oscillator = this.get(\'oscillator\');\\n\\n        if (oscillator.get(\'isPlaying\')) {\\n          oscillator.stop();\\n        }\\n      },\\n\\n      adjustSynthParams(x, y) {\\n        const oscillator = this.get(\'oscillator\');\\n        const frequency = this._getFrequency(x);\\n        const gain = this._getGain(y);\\n\\n        oscillator.update(\'frequency\', frequency);\\n        oscillator.update(\'gain\', gain);\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null],[0,"\\n"],[7,"p"],[9],[0,"\\n  "],[7,"code"],[9],[0,"xy-pad"],[10],[0," component template\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  <canvas\\n    width="],[0,"{{padSize}}\\n    height="],[0,"{{padSize}}\\n    style=\\"background-color: black;\\"\\n\\n    onmousedown="],[0,"{{action \\"activate\\"}}\\n    onmousemove="],[0,"{{action \\"updateCoordinates\\"}}\\n    onmouseleave="],[0,"{{action \\"deactivate\\"}}\\n    onmouseup="],[0,"{{action \\"deactivate\\"}}\\n\\n    ontouchstart="],[0,"{{action \\"activate\\"}}\\n    ontouchmove="],[0,"{{action \\"updateCoordinates\\"}}\\n    ontouchend="],[0,"{{action \\"deactivate\\"}}\\n    ontouchcancel="],[0,"{{action \\"deactivate\\"}}\\n  ></canvas>\\n"]],"parameters":[]},null],[0,"\\n"],[7,"p"],[9],[0,"\\n  "],[7,"code"],[9],[0,"xy-pad"],[10],[0," component javascript\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  // leaving out the code to draw the grid/text\\n  export default Ember.Component.extend({\\n    actions: {\\n      activate(e) {\\n        e.preventDefault();\\n        this.send(\'updateCoordinates\', e);\\n        this.sendAction(\'activate\');\\n      },\\n\\n      deactivate(e) {\\n        this.sendAction(\'deactivate\');\\n      },\\n\\n      updateCoordinates(e) {\\n        e.preventDefault();\\n\\n        const [ canvas ] = this.$(\'canvas\');\\n        const canvasLocation = canvas.getBoundingClientRect();\\n        const xRelToScreen = e.x || e.touches[0].screenX;\\n        const yRelToScreen = e.y || e.touches[0].screenY;\\n        const x = xRelToScreen - canvasLocation.left;\\n\\n        // \'y\' is measured from top, so invert for value from bottom\\n        const y = this.get(\'padSize\') + (yRelToScreen - canvasLocation.top) * -1;\\n\\n        this.sendAction(\'updateCoordinates\', x, y);\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null]],"hasEval":false}',meta:{moduleName:"dummy/templates/synthesis/xy-pad.hbs"}})
e.default=n}),define("dummy/templates/timing",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"EvSTmtZ2",block:'{"symbols":[],"statements":[[7,"h1"],[9],[0,"Timing"],[10],[0,"\\n\\n"],[7,"ul"],[11,"class","nav nav-tabs"],[9],[0,"\\n"],[4,"link-to",["timing.index"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Understanding Timing"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["timing.with-ember-audio"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Timing with Ember Audio"],[10],[0,"\\n"]],"parameters":[]},null],[0,"\\n"],[4,"link-to",["timing.drum-machine"],[["tagName","classNames"],["li","link"]],{"statements":[[0,"    "],[7,"a"],[9],[0,"Multisampled Drum Machine"],[10],[0,"\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[1,[21,"outlet"],false],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/timing.hbs"}})
e.default=n}),define("dummy/templates/timing/drum-machine",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"skP0cRk4",block:'{"symbols":["beatTrack","beat"],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Multisampled Drum Machine"],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Below is an example of a drum machine that loads up three samples for each\\n    lane and allows you to program a drum beat. The sample is automatically\\n    alternated so you never hear the same sample back-to-back.\\n  "],[10],[0,"\\n\\n"],[4,"if",[[23,["isLoading"]]],null,{"statements":[[0,"    "],[7,"div"],[11,"class","spinner"],[9],[0,"\\n      "],[7,"div"],[11,"class","rect1"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect2"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect3"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect4"],[9],[10],[0,"\\n      "],[7,"div"],[11,"class","rect5"],[9],[10],[0,"\\n    "],[10],[0,"\\n"]],"parameters":[]},{"statements":[[0,"    "],[7,"div"],[11,"class","controls"],[9],[0,"\\n      "],[7,"button"],[11,"class","btn btn-primary"],[9],[0,"PLAY"],[3,"action",[[22,0,[]],"play"]],[10],[0,"\\n\\n      "],[7,"div"],[9],[0,"\\n        "],[7,"label"],[9],[0,"Tempo "],[1,[27,"input",null,[["value"],[[23,["bpm"]]]]],false],[10],[0,"\\n      "],[10],[0,"\\n    "],[10],[0,"\\n\\n    "],[7,"div"],[11,"class","beat-machine"],[9],[0,"\\n"],[4,"each",[[23,["beatTracks"]]],null,{"statements":[[0,"        "],[7,"div"],[11,"class","beat-lane"],[9],[0,"\\n          "],[7,"p"],[11,"class","text"],[9],[1,[22,1,["name"]],false],[10],[0,"\\n\\n"],[4,"each",[[22,1,["beats"]]],null,{"statements":[[0,"            "],[7,"div"],[11,"role","button"],[11,"class","beat-pad"],[9],[0,"\\n              "],[7,"span"],[12,"class",[28,["pad ",[27,"if",[[22,2,["active"]],"active"],null]," ",[27,"if",[[22,2,["isPlaying"]],"playing"],null]," ",[27,"if",[[22,2,["currentTimeIsPlaying"]],"highlighted"],null]]]],[9],[10],[0,"\\n            "],[3,"action",[[22,0,[]],"toggleActive",[22,2,[]]]],[10],[0,"\\n"]],"parameters":[2]},null],[0,"        "],[10],[0,"\\n"]],"parameters":[1]},null],[0,"    "],[10],[0,"\\n"]],"parameters":[]}],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    This is a really great example of how performant the Web Audio API is. Try\\n    turning the tempo up to something ridiculous like 1200. If you hear any\\n    audio artifacts (\\"glitches\\"), know that they are not caused by your\\n    pc/browser, but by an acoustic property called \\"phase cancellation\\" and it\'s\\n    happening because at that high a tempo, the same sample ends up played over\\n    itself at a slightly different time.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Let\'s take it a \\"few\\" steps further. How about some eighth notes at 1\\n    million BPM?\\n\\n    "],[7,"br"],[9],[10],[0,"\\n\\n    "],[7,"button"],[11,"class","btn btn-danger"],[9],[0,"\\n      Engage Ludicrous Mode\\n    "],[3,"action",[[22,0,[]],"engageLudicrousMode"]],[10],[0,"\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    \\"Clicks and pops\\" is what we should hear if our audio hardware can\'t keep\\n    up and \\"stutters\\" is what we should hear if our browsers can\'t keep up. Do\\n    you hear either of those? I don\'t. That\'s how awesome the Web Audio\\n    API is. It\'s truly letting us tap in to the host machine\'s audio hardware.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  "],[0,"{{#if isLoading}}\\n    "],[0,"{{!-- Some loading indicator... --}}\\n  "],[0,"{{else}}\\n    <div class=\\"controls\\">\\n      <button class=\\"btn btn-primary\\" "],[0,"{{action \\"play\\"}}>PLAY</button>\\n\\n      <div>\\n        <label>Tempo "],[0,"{{input value=bpm}}</label>\\n      </div>\\n    </div>\\n\\n    <div class=\\"beat-machine\\">\\n      "],[0,"{{#each beatTracks as |beatTrack|}}\\n        <div class=\\"beat-lane\\">\\n          <p class=\\"text\\">"],[0,"{{beatTrack.name}}</p>\\n\\n          "],[0,"{{#each beatTrack.beats as |beat|}}\\n            <div class=\\"beat-pad\\" "],[0,"{{action \\"toggleActive\\" beat}}>\\n              <span class=\\"pad "],[0,"{{if beat.active \\"active\\"}} "],[0,"{{if beat.isPlaying \\"playing\\"}} "],[0,"{{if beat.currentTimeIsPlaying \\"highlighted\\"}}\\"></span>\\n            </div>\\n          "],[0,"{{/each}}\\n        </div>\\n      "],[0,"{{/each}}\\n    </div>\\n  "],[0,"{{/if}}\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n    beatTracks: null,\\n    isLoading: true,\\n    bpm: 120,\\n\\n    initBeats: Ember.on(\'init\', function() {\\n      Ember.RSVP.all([\\n        this._loadBeatTrackFor(\'kick\'),\\n        this._loadBeatTrackFor(\'snare\'),\\n        this._loadBeatTrackFor(\'hihat\')\\n      ])\\n      .then((beatTracks) => {\\n        beatTracks.map((beatTrack) => {\\n          const name = beatTrack.get(\'name\');\\n\\n          // default is 4 beats, but we\'re going to use 16\\n          beatTrack.set(\'numBeats\', 16);\\n\\n          // snare and hihat are a little louder than kick, so we\'ll turn down the gain\\n          if (name === \'snare\' || name === \'hihat\') {\\n            beatTrack.set(\'gain\', 0.5);\\n          }\\n\\n          // and let\'s pan the hihat a little to the left\\n          if (name === \'hihat\') {\\n            beatTrack.set(\'pan\', -0.4);\\n          }\\n        });\\n\\n        this.set(\'isLoading\', false);\\n        this.set(\'beatTracks\', beatTracks);\\n      });\\n    }),\\n\\n    _loadBeatTrackFor(name) {\\n      // \'snare1.wav\', \'kick2.wav\', etc..., from this project\'s public folder\\n      const sounds = [`${name}1.wav`, `${name}2.wav`, `${name}3.wav`];\\n\\n      // If name === \'kick\', this creates a BeatTrack instance called\\n      // \'kick\' that contains the sounds \'kick1\', \'kick2\', and \'kick3\'\\n      return this.get(\'audio\').load(sounds).asBeatTrack(name);\\n    },\\n\\n    actions: {\\n      play() {\\n        this.get(\'beatTracks\').map((beatTrack) => {\\n          // playActiveBeats() optionally accepts \\"noteType\\" which defaults to \\"1/4\\"\\n          // notes, but we want to use eighth notes\\n          beatTrack.playActiveBeats(this.get(\'bpm\'), 1/8);\\n\\n          // /* playActiveBeats() is a convenience method. For more control, you could do:\\n          // http://bradthemad.org/guitar/tempo_explanation.php */\\n          // const eighthNoteDuration = (240 * 1/8) / this.get(\'bpm\');\\n          // beatTrack.get(\'beats\').map((beat, beatIndex) => {\\n          //   /* whatever else you need to do */\\n          //   beat.ifActivePlayIn(beatIndex * eighthNoteDuration);\\n          // });\\n        });\\n      },\\n\\n      toggleActive(beat) {\\n        if (beat.get(\'active\')) {\\n          beat.set(\'active\', false);\\n        } else {\\n          beat.play();\\n          beat.set(\'active\', true);\\n        }\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h3"],[9],[0,"Drum Samples Credits:"],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    The hihats are from the \\"Erkans Samples\\" pack downloaded from the\\n    "],[7,"a"],[11,"href","http://www.ultimatemetal.com/forum/forums/andy-sneap-foh/"],[9],[0,"Andy Sneap"],[10],[0,"\\n    section of the\\n    "],[7,"a"],[11,"href","http://www.ultimatemetal.com/forum/"],[9],[0,"Ultimate Metal Forum"],[10],[0,".\\n    Recorded by Erkan Dogantimur.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    The snare and kick are from the \\"ALTQQ Drum Pack\\" also downloaded from the\\n    "],[7,"a"],[11,"href","http://www.ultimatemetal.com/forum/forums/andy-sneap-foh/"],[9],[0,"Andy Sneap"],[10],[0,"\\n    section of the\\n    "],[7,"a"],[11,"href","http://www.ultimatemetal.com/forum/"],[9],[0,"Ultimate Metal Forum"],[10],[0,".\\n    Recorded by Fabian Prezja of Prezja Productions.\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/timing/drum-machine.hbs"}})
e.default=n}),define("dummy/templates/timing/index",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"4XnjaQSU",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Timing"],[10],[0,"\\n\\n  "],[7,"p"],[11,"class","note well"],[9],[0,"\\n    It is not necessary to understand this concept, as Ember Audio has methods\\n    that allow you to ignore it. I encourage you to understand it anyway. It\'s\\n    easy to grasp, and if you\'re building a rhythm/timing heavy app as this\\n    knowledge will be very useful to you.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Timing with the Web Audio API can seem tricky at first. It\'s unlike any other\\n    timing system native to the browser. It\'s not very complex, and easy to\\n    wrap your brain around once you \\"get\\" it.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    It\'s based on the concept of a "],[7,"code"],[9],[0,"currentTime"],[10],[0," that starts at\\n    0 and counts it\'s way up in seconds (as a high-precision Double). This\\n    "],[7,"code"],[9],[0,"currentTime"],[10],[0," starts the moment that an "],[7,"code"],[9],[0,"AudioContext"],[10],[0," has been created.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    If, for instance, you wanted a sound to play exactly 1 second\\n    after a user clicks a button, it could look like this:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  // This is pseudo-code. The goal at this point is to get the concept across,\\n  // not to potentially confuse you with framework-specific stuff.\\n\\n  // The moment that audioContext is created, audioContext.currentTime starts counting seconds\\n  var audioContext = new AudioContext();\\n\\n  var sound = // Create or load a sound and hook up audio inputs and outputs.\\n  // Not important right now...\\n  // We\'ll say that the result is an audio \\"node\\" that is ready to play\\n\\n  function handleClick() {\\n    // Get the current time from audioContext.\\n    var now = audioContext.currentTime;\\n\\n    // Start the sound we created up there^, adding 1 second to \\"now\\"\\n    // The Web Audio API deals in seconds, not milliseconds\\n    sound.start(now + 1);\\n  }\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Now what if we wanted to schedule the sound 5 times, each exactly 1 second apart?\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  // Again, I want to mention that this code will not work as-is. It\'s ignoring\\n  // some other quirks of the Web Audio API. We\'re only focused on understanding\\n  // timing at the moment.\\n  var audioContext = new AudioContext();\\n\\n  var sound = // Create or load a sound and hook up audio inputs and outputs.\\n\\n  function handleClick() {\\n    var now = audioContext.currentTime;\\n\\n    for (var i = 0; i < 5; i++) {\\n      sound.start(now + i);\\n    }\\n  }\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    As you can see, as far as an "],[7,"code"],[9],[0,"AudioContext"],[10],[0," is concerned, the\\n    moment that it is created is \\"the beginning of time\\" and scheduling events\\n    is achieved by specifying an exact moment in time.\\n    "],[7,"code"],[9],[0,"sound.start(100)"],[10],[0," would play the sound exactly 100 seconds after\\n    the "],[7,"code"],[9],[0,"AudioContext"],[10],[0," was created, regardless of what time\\n    "],[7,"code"],[9],[0,"sound.start(100)"],[10],[0," was called. If "],[7,"code"],[9],[0,"sound.start(100)"],[10],[0,"\\n    is called after 100 seconds has already passed since \\"the beginning of time,\\"\\n    the sound will play immediately.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[11,"class","note well"],[9],[0,"\\n    Again, this is an important concept to understand, but in many cases (even\\n    more complex cases, such as\\n    "],[4,"link-to",[[23,["timing","drum-machine"]]],null,{"statements":[[0,"building a rhythmically-based instrument"]],"parameters":[]},null],[0,")\\n    this is\\n    already handled for you. Check out "],[4,"link-to",["timing.with-ember-audio"],null,{"statements":[[0,"Beats"]],"parameters":[]},null],[0,",\\n    or the very last example on this page.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"The first example again, but with real code"],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Just in case you\'re not completely grasping how this relates directly to\\n    Ember Audio. Here is the first example from above, but written so that it\\n    works in Ember and Ember Audio.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"button"],[11,"class","btn"],[9],[0,"Play in One Second"],[3,"action",[[22,0,[]],"playInOneSecond1"]],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[0,"  <button "],[0,"{{action \\"playInOneSecond\\"}}>Play in One Second</button>\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  export default Ember.Whatever.extend({\\n    audio: Ember.inject.service(),\\n\\n    initSound: Ember.on(\'init\', function() {\\n      this.get(\'audio\').load(\'Db5.mp3\').asSound(\'delayed-note\');\\n    }),\\n\\n    actions: {\\n      playInOneSecond() {\\n        const audio = this.get(\'audio\');\\n        const currentTime = audio.get(\'audioContext.currentTime\');\\n        audio.getSound(\'delayed-note\').playAt(currentTime + 1);\\n      }\\n    }\\n  });\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    By using a "],[7,"code"],[9],[0,"Sound"],[10],[0,"\'s "],[7,"code"],[9],[0,"playIn"],[10],[0," method,\\n    "],[7,"code"],[9],[0,"currentTime"],[10],[0," is handled for you, so this can be made even simpler.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"button"],[11,"class","btn"],[9],[0,"Play in One Second"],[3,"action",[[22,0,[]],"playInOneSecond2"]],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  playInOneSecond() {\\n    this.get(\'audio\').getSound(\'delayed-note\').playIn(1);\\n  }\\n"]],"parameters":[]},null]],"hasEval":false}',meta:{moduleName:"dummy/templates/timing/index.hbs"}})
e.default=n}),define("dummy/templates/timing/with-ember-audio",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0
var n=Ember.HTMLBars.template({id:"3zW03U69",block:'{"symbols":[],"statements":[[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h2"],[9],[0,"Timing with Ember Audio"],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    There are two ways to schedule sounds with Ember Audio:\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h3"],[9],[0,"1: Manually passing a time to a "],[7,"code"],[9],[0,"Sound"],[10],[0," or a "],[7,"code"],[9],[0,"Track"],[10],[10],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Using a fixed moment in time with the "],[7,"code"],[9],[0,"playAt"],[10],[0," method, or by\\n    using an amount of time from now with the "],[7,"code"],[9],[0,"playIn"],[10],[0," method.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  this.get(\'audio\').load(\'some.mp3\').asSound(\'some-sound\');\\n\\n  // some time later...\\n\\n  const audio = this.get(\'audio\');\\n  const now = audio.get(\'audioContext.currentTime\');\\n\\n  audio.getSound(\'some-sound\').playAt(now + 1); // plays in 1 second\\n"]],"parameters":[]},null],[0,"\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  this.get(\'audio\').load(\'some.mp3\').asSound(\'some-sound\');\\n\\n  // some time later...\\n\\n  this.get(\'audio\').getSound(\'some-sound\').playIn(1); // plays in 1 second\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"h3"],[9],[0,"2: By using a "],[7,"code"],[9],[0,"BeatTrack"],[10],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  this.get(\'audio\').load(\'some.mp3\').asBeatTrack(\'some-sound\');\\n\\n  // some time later...\\n\\n  const beatTrack = this.get(\'audio\').getBeatTrack(\'some-sound\');\\n  const BPM = 120;\\n\\n  // playBeats() accepts BPM and will play all the beatTrack\'s beats at that BPM,\\n  beatTrack.playBeats(BPM);\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    Instead of using "],[7,"code"],[9],[0,"beatTrack.playBeats"],[10],[0,", you can also call a Beat\\n    instance\'s "],[7,"code"],[9],[0,"playIn"],[10],[0," method directly, passing an amount of time\\n    from now (in seconds) that the beat should play.\\n  "],[10],[0,"\\n"],[10],[0,"\\n\\n"],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[0,"  // http://bradthemad.org/guitar/tempo_explanation.php\\n  const eighthNoteDuration = (240 * 1/8) / BPM;\\n\\n  beatTrack.get(\'beats\').map((beat, beatIndex) => {\\n    // Each \\"beat\\" is a \\"Beat\\" instance\\n    beat.playIn(beatIndex * eighthNoteDuration);\\n  });\\n"]],"parameters":[]},null],[0,"\\n"],[7,"div"],[11,"class","content"],[9],[0,"\\n  "],[7,"p"],[9],[0,"\\n    "],[7,"code"],[9],[0,"beatTrack.playActiveBeats"],[10],[0," and "],[7,"code"],[9],[0,"beat.ifActivePlayIn"],[10],[0,"\\n    are also available which will allow you to mark a beat\'s "],[7,"code"],[9],[0,"active"],[10],[0,"\\n    property and the method will play rests (periods with no audio) during any\\n    beat that isn\'t "],[7,"code"],[9],[0,"active"],[10],[0,". This is to facilitate the way that most\\n    \\"drum machines\\" work.\\n  "],[10],[0,"\\n\\n  "],[7,"p"],[9],[0,"\\n    Take a look at the "],[4,"link-to",["timing.drum-machine"],null,{"statements":[[0,"Drum Machine"]],"parameters":[]},null],[0," for\\n    examples.\\n  "],[10],[0,"\\n"],[10],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/timing/with-ember-audio.hbs"}})
e.default=n}),define("dummy/utils/array-methods",["exports","ember-audio/utils/array-methods"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/utils/decode-base64",["exports","ember-audio/utils/decode-base64"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/utils/exponential-ratio",["exports","ember-audio/utils/exponential-ratio"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/utils/note-methods",["exports","ember-audio/utils/note-methods"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/utils/utils",["exports","ember-audio/utils/utils"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/utils/within-range",["exports","ember-audio/utils/within-range"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})})
define("dummy/utils/zeroify",["exports","ember-audio/utils/zeroify"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}})}),define("dummy/config/environment",[],function(){try{var e="dummy/config/environment",n=document.querySelector('meta[name="'+e+'"]').getAttribute("content"),t={default:JSON.parse(decodeURIComponent(n))}
return Object.defineProperty(t,"__esModule",{value:!0}),t}catch(a){throw new Error('Could not read config from meta tag with name "'+e+'".')}}),runningTests||require("dummy/app").default.create({})
